#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <assert.h> 

typedef enum {false, true}bool;

double xdubdot (double x, double y, double ydot){
  double mu = .01215;
  double xdub;
  xdub = (-(1 - mu) * (x - mu))/(pow(sqrt(pow((x - mu), 2) + pow(y, 2)), 3)) - (mu * (x + 1 - mu))/pow(sqrt(pow(x + 1 - mu, 2) + pow(y, 2)), 3) + 2 * ydot + x;
  return xdub;
}

double ydubdot (double x, double y, double xdot){
  double mu = .01215;
  double ydub = (-((1 - mu) * y)/(pow(sqrt(pow(x - mu, 2) + pow(y, 2)), 3))) - ((mu * y)/pow(sqrt(pow((x + (1 - mu)), 2) + pow(y, 2)), 3)) - 2 * xdot + y;
  return ydub;
}

void rk45 (double startx, double endx, double y, double h, double eps, double xdot, double ydot, bool plot){
  int step = 0;
  double x = startx;
  double t = 0;

  if (plot){
    printf("%lf\t%lf\n", x, y);
    FILE * plotdat;
    plotdat = fopen("plotdat", "w");
    fprintf(plotdat, "%lf\t%lf\n", x, y);
  }
  else {
    printf("Step %d: x = %lf, y = %lf\n", step, x, y);
  }

  double k1[4], k2[4], k3[4], k4[4], k5[4], k6[4], y1[4], y2[4], R, delta;

  double tfin = 15;
 
  while (t < tfin) {
    // h = (h < endx - x) ? h : (endx - x);

    /*
 if (step > 300){
 break;
 }
    */

    k1[0] = h*xdot;
    k1[1] = h*xdubdot(x,y,ydot);
    k1[2] = h*ydot;
    k1[3] = h*ydubdot(x,y,xdot);

    k2[0] = h*(xdot+k1[1]/4);
    k2[1] = h*xdubdot(x+k1[0]/4,y+k1[2]/4,ydot+k1[3]/4);
    k2[2] = h*(ydot+k1[3]/4);
    k2[3] = h*ydubdot(x+k1[0]/4,y+k1[2]/4,xdot+k1[1]/4);
 
    k3[0] = h*(xdot+3*k1[1]/32+9*k2[1]/32);
    k3[1] = h*xdubdot(x+3*k1[0]/32+9*k2[0]/32,y+3*k1[2]/32+9*k2[2]/32,ydot+3*k1[3]/32+9*k2[3]/32);
    k3[2] = h*(ydot+3*k1[3]/32+9*k2[3]/32);
    k3[3] = h*ydubdot(x+3*k1[0]/32+9*k2[0]/32,y+3*k1[2]/32+9*k2[2]/32,xdot+3*k1[1]/32+9*k2[1]/32);
 
    k4[0] = h*(xdot+1932*k1[1]/2197-7200*k2[1]/2197+7296*k3[1]/2197);
    k4[1] = h*xdubdot(x+1932*k1[0]/2197-7200*k2[0]/2197+7296*k3[0]/2197,y+1932*k1[2]/2197-7200*k2[2]/2197+7296*k3[2]/2197,ydot+1932*k1[3]/2197-7200*k2[3]/2197+7296*k3[3]/2197);
    k4[2] = h*(ydot+1932*k1[3]/2197-7200*k2[3]/2197+7296*k3[3]/2197);
    k4[3] = h*ydubdot(x+1932*k1[0]/2197-7200*k2[0]/2197+7296*k3[0]/2197,y+1932*k1[2]/2197-7200*k2[2]/2197+7296*k3[2]/2197,xdot+1932*k1[1]/2197-7200*k2[1]/2197+7296*k3[1]/2197);
 
    k5[0] = h*( xdot+439*k1[1]/216-8*k2[1]+3680*k3[1]/513-845*k4[1]/4104);
    k5[1] = h*xdubdot(x+439*k1[0]/216-8*k2[0]+3680*k3[0]/513-845*k4[0]/4104, y+439*k1[2]/216-8*k2[2]+3680*k3[2]/513-845*k4[2]/4104, ydot+439*k1[3]/216-8*k2[3]+3680*k3[3]/513-845*k4[3]/4104);
    k5[2] = h*( ydot+439*k1[3]/216-8*k2[3]+3680*k3[3]/513-845*k4[3]/4104);
    k5[3] = h*ydubdot( x+439*k1[0]/216-8*k2[0]+3680*k3[0]/513-845*k4[0]/4104, y+439*k1[2]/216-8*k2[2]+3680*k3[2]/513-845*k4[2]/4104, xdot+439*k1[1]/216-8*k2[1]+3680*k3[1]/513-845*k4[1]/4104);

    k6[0] = h*( xdot-8*k1[1]/27+2*k2[1]-3544*k3[1]/2565+1859*k4[1]/4104-11*k5[1]/40);
    k6[1] = h*xdubdot( x-8*k1[0]/27+2*k2[0]-3544*k3[0]/2565+1859*k4[0]/4104-11*k5[0]/40, y-8*k1[2]/27+2*k2[2]-3544*k3[2]/2565+1859*k4[2]/4104-11*k5[2]/40, ydot-8*k1[3]/27+2*k2[3]-3544*k3[3]/2565+1859*k4[3]/4104-11*k5[3]/40);
    k6[2] = h*( ydot-8*k1[3]/27+2*k2[3]-3544*k3[3]/2565+1859*k4[3]/4104-11*k5[3]/40);
    k6[3] = h*ydubdot( x-8*k1[0]/27+2*k2[0]-3544*k3[0]/2565+1859*k4[0]/4104-11*k5[0]/40, y-8*k1[2]/27+2*k2[2]-3544*k3[2]/2565+1859*k4[2]/4104-11*k5[2]/40, xdot-8*k1[1]/27+2*k2[1]-3544*k3[1]/2565+1859*k4[1]/4104-11*k5[1]/40);

    // Y1
    y1[0] = x+25*k1[0]/216+1408*k3[0]/2565+2197*k4[0]/4104-k5[0]/5;
    y1[1] = xdot+25*k1[1]/216+1408*k3[1]/2565+2197*k4[1]/4104-k5[1]/5;
    y1[2] = y+25*k1[2]/216+1408*k3[2]/2565+2197*k4[2]/4104-k5[2]/5;
    y1[3] = ydot+25*k1[3]/216+1408*k3[3]/2565+2197*k4[3]/4104-k5[3]/5;

    // Y2
    y2[0] = x+16*k1[0]/135+6656*k3[0]/12825+28561*k4[0]/56430-9*k5[0]/50+2*k6[0]/55;
    y2[1] = xdot+16*k1[1]/135+6656*k3[1]/12825+28561*k4[1]/56430-9*k5[1]/50+2*k6[1]/55;
    y2[2] = y+16*k1[2]/135+6656*k3[2]/12825+28561*k4[2]/56430-9*k5[2]/50+2*k6[2]/55;
    y2[3] = ydot+16*k1[3]/135+6656*k3[3]/12825+28561*k4[3]/56430-9*k5[3]/50+2*k6[3]/55;


    /* 
 // k1 = h * f(x, y); 
 k1[0] = h * xdot;
 k1[1] = h * xdubdot(x, y, ydot);
 k1[2] = h * ydot;
 k1[3] = h * ydubdot(x, y, xdot);
 // k2 = h * f(x + h/4, y + k1/4);
 k2[0] = h * (xdot + k1[1] / 4);
 k2[1] = h * xdubdot(x + k1[0] / 4, y + k1[2] / 4, ydot + k1[3] / 4);
 k2[2] = h * (ydot + k1[3] / 4);
 k2[3] = h * ydubdot(x + k1[0] / 4, y + k1[2] / 4, xdot + k1[1] / 4);
 // k3 = h * f(x + 3 * h/8, y + 3 * k1/32 + 9 * k2/32);
 k3[0] = h * (xdot + 3 * k1[1] / 32 + 9 * k2[1] / 32);
 k3[1] = h * xdubdot(x + 3 * k1[0] / 32 + 9 * k2[0] / 32, y + 3 * k1[2] / 32 + 9 * k2[2] / 32, ydot + 3 * k1[3] / 32 + 9 * k2[3] / 32);
 k3[2] = h * (ydot + 3 * k1[3] / 32 + 9 * k2[3] / 32);
 k3[3] = h * ydubdot(x + 3 * k1[0] / 32 + 9 * k2[0] / 32, y + 3 * k1[2] / 32 + 9 * k2[2] / 32, xdot + 3 * k1[1] / 32 + 9 * k2[1] / 32);
 // k4 = h * f(x + 12 * h/13, y + 1932 * k1/2197 - 7200 * k2/2197 + 7296 * k3/2197);
 k4[0] = h * (xdot + 1932 * k1[1] / 2197 - 7200 * k2[1] / 2197 + 7296 * k3[1] / 2197);
 k4[1] = h * xdubdot(x + 1932 * k1[0] / 2197 - 7200 * k2[0] / 2197 + 7296 * k3[0] / 2197, y + 1932 * k1[2] / 2197 - 7200 * k2[2] / 2197 + 7296 * k3[2] / 2197, ydot + 1932 * k1[3] / 2197 - 7200 * k2[3] / 2197 + 7296 * k3[3] / 2197);
 k4[2] = h * (ydot + 1932 * k1[1] / 2197 - 7200 * k2[1] / 2197 + 7296 * k3[1] / 2197);
 k4[3] = h * ydubdot(x + 1932 * k1[0] / 2197 - 7200 * k2[0] / 2197 + 7296 * k3[0] / 2197, y + 1932 * k1[2] / 2197 - 7200 * k2[2] / 2197 + 7296 * k3[2] / 2197, xdot + 1932 * k1[1] / 2197 - 7200 * k2[1] / 2197 + 7296 * k3[1] / 2197);
 // k5 = h * f(x + h, y + 439 * k1/216 - 8 * k2 + 3680 * k3/513 - 845 * k4/4104);
 k5[0] = h * (xdot + 439 * k1[1] / 216 - 8 * k2[1] + 3680 * k3[1] / 513 - 845 * k4[1] / 4104);
 k5[1] = h * xdubdot(x + 439 * k1[0] / 216 - 8 * k2[0] + 3680 * k3[0] / 513 - 845 * k4[0] / 4104, y + 439 * k1[2] / 216 - 8 * k2[2] + 3680 * k3[2] / 513 - 845 * k4[2] / 4104, ydot + 439 * k1[3] / 216 - 8 * k2[3] + 3680 * k3[3] / 513 - 845 * k4[3] / 4104);
 k5[2] = h * (ydot + 439 * k1[3] / 216 - 8 * k2[3] + 3680 * k3[3] / 513 - 845 * k4[3] / 4104);
 k5[3] = h * ydubdot(x + 439 * k1[0] / 216 - 8 * k2[0] + 3680 * k3[0] / 513 - 845 * k4[0] / 4104, y + 439 * k1[2] / 216 - 8 * k2[2] + 3680 * k3[2] / 513 - 845 * k4[2] / 4104, xdot + 439 * k1[1] / 216 - 8 * k2[1] + 3680 * k3[1] / 513 - 845 * k4[1] / 4104);
 // k6 = h * f(x + h/2, y - 8 * k1/27 + 2 * k2 - 3544 * k3/2565 + 1859 * k4/4104 - 11 * k5/40);
 k6[0] = h * (xdot - 8 * k1[1] / 27 + 2 * k2[1] - 3544 * k3[1] / 2565 + 1859 * k4[1] / 4104 - 11 * k5[1] / 40);
 k6[1] = h * xdubdot(x - 8 * k1[0] / 27 + 2 * k2[0] - 3544 * k3[0] / 2565 + 1859 * k4[0] / 4104 - 11 * k5[0] / 40, y - 8 * k1[2] / 27 + 2 * k2[2] - 3544 * k3[2] / 2565 + 1859 * k4[2] / 4104 - 11 * k5[2] / 40, ydot - 8 * k1[3] / 27 + 2 * k2[3] - 3544 * k3[3] / 2565 + 1859 * k4[3] / 4104 - 11 * k5[3] / 40);
 k6[2] = h * (ydot - 8 * k1[3] / 27 + 2 * k2[3] - 3544 * k3[3] / 2565 + 1859 * k4[3] / 4104 - 11 * k5[3] / 40);
 k6[3] = h * ydubdot(x - 8 * k1[0] / 27 + 2 * k2[0] - 3544 * k3[0] / 2565 + 1859 * k4[0] / 4104 - 11 * k5[0] / 40, y - 8 * k1[2] / 27 + 2 * k2[2] - 3544 * k3[2] / 2565 + 1859 * k4[2] / 4104 - 11 * k5[2] / 40, xdot - 8 * k1[1] / 27 + 2 * k2[1] - 3544 * k3[1] / 2565 + 1859 * k4[1] / 4104 - 11 * k5[1] / 40);
 y1[0] = x + 25 * k1[0] / 216 + 1408 * k3[0] / 2565 + 2197 * k4[0] / 4104 - k5[0] / 5;
 y1[1] = xdot + 25 * k1[1] / 216 + 1408 * k3[1] / 2565 + 2197 * k4[1] / 4104 - k5[1] / 5;
 y1[2] = y + 25 * k1[2] / 216 + 1408 * k3[2] / 2565 + 2197 * k4[2] / 4104 - k5[2] / 5;
 y1[3] = ydot + 25 * k1[3] / 216 + 1408 * k3[3] / 2565 + 2197 * k4[3] / 4104 - k5[3] / 5;
 y2[0] = x + 16 * k1[0] / 135 + 6656 * k3[0] / 12825 + 28561 * k4[0] / 56430 - 9 * k5[0] / 50 + 2 * k6[0] / 55;
 y2[1] = xdot + 16 * k1[1] / 135 + 6656 * k3[1] / 12825 + 28561 * k4[1] / 56430 - 9 * k5[1] / 50 + 2 * k6[1] / 55;
 y2[2] = y + 16 * k1[2] / 135 + 6656 * k3[2] / 12825 + 28561 * k4[2] / 56430 - 9 * k5[2] / 50 + 2 * k6[2] / 55; 
 y2[3] = ydot + 16 * k1[3] / 135 + 6656 * k3[3] / 12825 + 28561 * k4[3] / 56430 - 9 * k5[3] / 50 + 2 * k6[3] / 55;
 */

    R = sqrt(pow(y1[0] - y2[0], 2) + pow(y1[1] - y2[1], 2) + pow(y1[2] - y2[2], 2) + pow(y1[3] - y2[3], 2)) / h;
    // printf("R = %lf ",R);

    delta = 0.84*pow((eps/R),0.25);
    // printf("Delta: %lf\n",delta);
 
    if (R <= eps){
      x = y1[0];
      y = y1[2];
      xdot = y1[1];
      ydot = y1[3]; 
      step++;
      t += h;
      h = delta*h; 
      if (plot) {
	printf("%lf\t%lf\n", x * 384400, y * 384400);
      }
      else {
	printf("Step %d: x = %lf, y = %lf, t = %lf, xdot = %lf, ydot = %lf stepsize: %lf\n", step, x * 384400 ,y * 384400, t, xdot*1.0183028, ydot*1.0183028,h);
      }
    } 
    else {
      h = delta * h;
    }
 
    if (step == 450) {
      break;
    }
  }
}//end rk45 function

int main (int argc, char *argv[]) {
  double startx, endx, y, h, eps, xdot, ydot, delV;
  bool plot = false;

  if (argc == 1){
    //printf("Enter starting X value: ");
    //scanf("%lf", &startx);
    //printf("Enter ending X value: ");
    //scanf("%lf", &endx);
    //printf("Enter initial Y value: ");
    //scanf("%lf", &y);
    //printf("Enter step size: ");
    //scanf("%lf", &h);
    //printf("Enter epsilon value: ");
    //scanf("%lf", &eps);
    printf("Enter delta V value: ");
    scanf("%lf", &delV);
    // printf("Enter ydot value: ");
    // scanf("%lf", &ydot);
  }
 
  /*
 else {
 assert (argc == 9);
 assert (strcmp (argv[1], "-plot") == 0);
 startx = atof (argv[2]);
 endx = atof (argv[3]);
 y = atof (argv[4]);
 h = atof (argv[5]);
 eps = atof (argv[6]);
 delV = atof (argv[7]);
 ydot = atof (argv[8]);
 plot = true;
 }
  */

  xdot = -(9.238231 + delV);
  startx = 4670.46;
  y = 42164.1;
  h = 0.2;
  eps = 0.00001;
  ydot = 0;
  endx = 0;

  startx /= 384400;
  //endx /= 384400;
  y /= 384400;
  xdot /= 1.0183028463;
  ydot /= 1.0183028463;
  plot = true;

  rk45 (startx, endx, y, h, eps, xdot, ydot, plot);

  char command[1000];
  sprintf(command, "gnuplot -e \"outfile='plotdat'\" plotscript.txt");
  system(command);

  return 0;
}

