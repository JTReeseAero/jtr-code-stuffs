#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <assert.h>
#include <stdbool.h>


double f(double x, double y){
  return y - x * x + 1;
}

int ODE_solve(double x_start, double x_end, double y, double h, double epsilon, double (*f)(double, double), bool plot){

  int step = 0;
  double x = x_start;
  if(plot){
    printf("%lf\t%lf\n", x, y);
  }
  else{
    printf("Step %d: x = %lf, y = %lf\n", step, x, y);
  }  

  while(x < x_end){
    h = (h < x_end - x) ? h : (x_end - x);
    k1 = h * f(x,y);
    k2 = h * f(x + h/4.0, y + k1/4.0);
    k3 = h * f(x + 3.0*h/8.0, y + 3.0*k1/32.0 + 9.0*k2/32.0);
    k4 = h * f(x + 12.0*h/13.0, y + 1932.0*k1/2197.0 - 7200.0*k2/2197.0 + 7296.0*k3/2197.0);
    k5 = h * f(x + h, y + 439.0*k1/216.0 - 8.0*k2 + 3680.0*k3/513.0 - 845*k4/4104.0);
    k6 = h * f(x + h/2.0, y - 8.0*k1/27.0 + 2.0*k2 - 3544.0*k3/2565.0 + 1859.0*k4/4104.0 - 11.0*k5/40.0);

    y1 = y + 25.0*k1/216.0 + 1408.0*k3/2565.0 + 2197.0*k4/4104.0 - k5/5.0;
    y2 = y + 16.0*k1/135.0 + 6656.0*k3/12825.0 + 28561.0*k4/56430.0 - 9.0*k5/50.0 + 2.0*k6/55.0;
    
    R = fabs(y1-y2)/h;
    delta = .84 * pow(epsilon/R, 0.25);

    if(R <= espsilon){
      
    }
  }

  return 0;
}


int main(){


  return 0;
}
